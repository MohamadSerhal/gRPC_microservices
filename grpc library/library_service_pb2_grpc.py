# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import library_service_pb2 as library__service__pb2


class LibraryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_book = channel.unary_unary(
                '/library.Library/add_book',
                request_serializer=library__service__pb2.Book.SerializeToString,
                response_deserializer=library__service__pb2.Message.FromString,
                )
        self.delete_book = channel.unary_unary(
                '/library.Library/delete_book',
                request_serializer=library__service__pb2.BookName.SerializeToString,
                response_deserializer=library__service__pb2.Message.FromString,
                )
        self.update_book = channel.unary_unary(
                '/library.Library/update_book',
                request_serializer=library__service__pb2.Book.SerializeToString,
                response_deserializer=library__service__pb2.Message.FromString,
                )
        self.get_book = channel.unary_unary(
                '/library.Library/get_book',
                request_serializer=library__service__pb2.BookName.SerializeToString,
                response_deserializer=library__service__pb2.Book.FromString,
                )


class LibraryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add_book(self, request, context):
        """Add book to mongodb 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_book(self, request, context):
        """Remove a book by name from the DB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_book(self, request, context):
        """rpc update_book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_book(self, request, context):
        """rpc get_book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LibraryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_book': grpc.unary_unary_rpc_method_handler(
                    servicer.add_book,
                    request_deserializer=library__service__pb2.Book.FromString,
                    response_serializer=library__service__pb2.Message.SerializeToString,
            ),
            'delete_book': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_book,
                    request_deserializer=library__service__pb2.BookName.FromString,
                    response_serializer=library__service__pb2.Message.SerializeToString,
            ),
            'update_book': grpc.unary_unary_rpc_method_handler(
                    servicer.update_book,
                    request_deserializer=library__service__pb2.Book.FromString,
                    response_serializer=library__service__pb2.Message.SerializeToString,
            ),
            'get_book': grpc.unary_unary_rpc_method_handler(
                    servicer.get_book,
                    request_deserializer=library__service__pb2.BookName.FromString,
                    response_serializer=library__service__pb2.Book.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'library.Library', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Library(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/library.Library/add_book',
            library__service__pb2.Book.SerializeToString,
            library__service__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/library.Library/delete_book',
            library__service__pb2.BookName.SerializeToString,
            library__service__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/library.Library/update_book',
            library__service__pb2.Book.SerializeToString,
            library__service__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/library.Library/get_book',
            library__service__pb2.BookName.SerializeToString,
            library__service__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
